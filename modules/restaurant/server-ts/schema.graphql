type Restaurant {
  id: Int!
  title: String!
  content: String!
  reviews: [Review]
  averageRating: Int!
  totalReviews: Int!
}

type Review {
  id: Int!
  content: String!
  rating: Int!
  userId: Int!
  restaurantId: Int!
  reviewComment: ReviewComment
  userProfile: UserProfile!
}

type ReviewComment {
  id: Int!
  comment: String!
  reviewId: Int!
}

type RestaurantEdges {
  node: Restaurant
  cursor: Int
}

# PageInfo for Restaurants
type RestaurantPageInfo {
  endCursor: Int
  hasNextPage: Boolean
}

# Restaurants relay-style pagination query
type Restaurants {
  totalCount: Int
  edges: [RestaurantEdges]
  pageInfo: RestaurantPageInfo
}

extend type Query {
  # Restaurants pagination query
  restaurants(limit: Int, after: Int): Restaurants
  # Restaurant
  restaurant(id: Int!): Restaurant
}

extend type Mutation {
  addRestaurant(input: AddRestaurantInput!): Restaurant
  deleteRestaurant(id: Int!): Restaurant
  editRestaurant(input: EditRestaurantInput!): Restaurant
  addReview(input: AddReviewInput!): Review
  deleteReview(input: DeleteReviewInput!): Review
  editReview(input: EditReviewInput!): Review
  addReviewComment(input: AddReviewCommentInput!): ReviewComment
  deleteReviewComment(input: DeleteReviewCommentInput!): ReviewComment
  editReviewComment(input: EditReviewCommentInput!): ReviewComment
}

# Input for addRestaurant Mutation
input AddRestaurantInput {
  title: String!
  content: String!
}

# Input for editRestaurant Mutation
input EditRestaurantInput {
  id: Int!
  title: String!
  content: String!
}

input AddReviewInput {
  content: String!
  # Needed for reviewUpdated Subscription filter
  restaurantId: Int!
}

input DeleteReviewInput {
  id: Int!
  # Needed for reviewUpdated Subscription filter
  restaurantId: Int!
}

input EditReviewInput {
  id: Int!
  content: String!
  # Needed for reviewUpdated Subscription filter
  restaurantId: Int!
}

input AddReviewCommentInput {
  content: String!
  # Needed for reviewCommentUpdated Subscription filter
  restaurantId: Int!
}

input DeleteReviewCommentInput {
  id: Int!
  # Needed for reviewCommentUpdated Subscription filter
  restaurantId: Int!
}

input EditReviewCommentInput {
  id: Int!
  content: String!
  # Needed for reviewCommentUpdated Subscription filter
  restaurantId: Int!
}

extend type Subscription {
  # Subscription for when editing a restaurant
  restaurantUpdated(id: Int!): UpdateRestaurantPayload
  # Subscription for restaurant list
  restaurantsUpdated(endCursor: Int!): UpdateRestaurantPayload
  reviewUpdated(restaurantId: Int!): UpdateReviewPayload
  reviewCommentUpdated(reviewId: Int!): UpdateReviewCommentPayload
}

# Payload for restaurantsUpdated Subscription
type UpdateRestaurantPayload {
  mutation: String!
  id: Int!
  node: Restaurant
}

# Payload for reviewUpdated Subscription
type UpdateReviewPayload {
  mutation: String!
  id: Int
  restaurantId: Int!
  node: Review
}

# Payload for reviewUpdated Subscription
type UpdateReviewCommentPayload {
  mutation: String!
  id: Int
  restaurantId: Int!
  node: ReviewComment
}
