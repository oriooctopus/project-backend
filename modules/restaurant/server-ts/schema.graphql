type Restaurant {
  id: Int!
  averageRating: Float
  canAddReview: Boolean!
  canModify: Boolean!
  title: String!
  description: String!
  highestReview: Review
  imageUrl: String!
  lowestReview: Review
  location: String!
  reviews: [Review]
  totalReviews: Int!
  userId: Int!
}

type Review {
  id: Int!
  canAddComment: Boolean!
  canModify: Boolean!
  createdAt: String!
  content: String!
  date: String!
  rating: Int!
  restaurant: Restaurant
  userId: Int!
  restaurantId: Int!
  reviewComment: ReviewComment
  userProfile: UserProfile!
}

type ReviewComment {
  id: Int!
  canModify: Boolean!
  comment: String!
  review: Review!
  reviewId: Int!
  restaurantId: Int!
}

type RestaurantEdges {
  node: Restaurant
  cursor: Int
}

# PageInfo for Restaurants
type PaginationQueryPageInfo {
  endCursor: Int
  hasNextPage: Boolean
}

# Restaurants relay-style pagination query
type Restaurants {
  totalCount: Int
  edges: [RestaurantEdges]
  pageInfo: PaginationQueryPageInfo
}

type UnansweredReviewEdges {
  node: Review
  cursor: Int
}

# UnansweredReviews relay-style pagination query
type UnansweredReviews {
  totalCount: Int
  edges: [UnansweredReviewEdges]
  pageInfo: PaginationQueryPageInfo
}

extend type Query {
  restaurants(
    after: Int
    limit: Int
    ratingsMinimum: Int
  ): Restaurants
  getUnansweredReviewsForOwner(
    after: Int
    limit: Int
  ): UnansweredReviews
  restaurant(id: Int!): Restaurant
  review(id: Int!): Review
  reviewComment(id: Int!): ReviewComment
}

extend type Mutation {
  addRestaurant(input: AddRestaurantInput!): Restaurant
  deleteRestaurant(id: Int!): Restaurant
  editRestaurant(input: EditRestaurantInput!): Restaurant
  addReview(input: AddReviewInput!): Review
  deleteReview(id: Int!): Review
  editReview(input: EditReviewInput!): Review
  addReviewComment(input: AddReviewCommentInput!): ReviewComment
  deleteReviewComment(id: Int!): ReviewComment
  editReviewComment(input: EditReviewCommentInput!): ReviewComment
}

input AddRestaurantInput {
  description: String!
  title: String!
  imageUrl: String!
  location: String!
}

input EditRestaurantInput {
  description: String!
  id: Int!
  title: String!
  imageUrl: String!
  userId: Int!
  location: String!
}

input AddReviewInput {
  content: String!
  rating: Int!
  # Needed for reviewUpdated Subscription filter
  restaurantId: Int!
}

input EditReviewInput {
  id: Int!
  content: String!
  rating: Int!
}

input AddReviewCommentInput {
  comment: String!
  # Needed for reviewCommentUpdated Subscription filter
  reviewId: Int!
}

input EditReviewCommentInput {
  id: Int!
  comment: String!
  reviewId: Int!
}

extend type Subscription {
  # Subscription for when editing a restaurant
  restaurantUpdated(id: Int!): UpdateRestaurantPayload
  # Subscription for restaurant list
  restaurantsUpdated(endCursor: Int!): UpdateRestaurantPayload
  reviewUpdated(restaurantId: Int!): UpdateReviewPayload
  reviewCommentUpdated(reviewId: Int!): UpdateReviewCommentPayload
}

# Payload for restaurantsUpdated Subscription
type UpdateRestaurantPayload {
  mutation: String!
  id: Int!
  node: Restaurant
}

# Payload for reviewUpdated Subscription
type UpdateReviewPayload {
  mutation: String!
  id: Int
  restaurantId: Int!
  node: Review
}

# Payload for reviewUpdated Subscription
type UpdateReviewCommentPayload {
  mutation: String!
  id: Int
  restaurantId: Int!
  node: ReviewComment
}
