type Post {
  id: Int!
  title: String!
  content: String!
  reviews: [Review]
}

type Review {
  id: Int!
  content: String!
  rating: String!
  userId: Int!
  postId: Int!
  reviewComment: ReviewComment
  userProfile: UserProfile!
}

type ReviewComment {
  id: Int!
  comment: String!
  reviewId: Int!
}

type PostEdges {
  node: Post
  cursor: Int
}

# PageInfo for Posts
type PostPageInfo {
  endCursor: Int
  hasNextPage: Boolean
}

# Posts relay-style pagination query
type Posts {
  totalCount: Int
  edges: [PostEdges]
  pageInfo: PostPageInfo
}

extend type Query {
  # Posts pagination query
  posts(limit: Int, after: Int): Posts
  # Post
  post(id: Int!): Post
}

extend type Mutation {
  addPost(input: AddPostInput!): Post
  deletePost(id: Int!): Post
  editPost(input: EditPostInput!): Post
  addReview(input: AddReviewInput!): Review
  deleteReview(input: DeleteReviewInput!): Review
  editReview(input: EditReviewInput!): Review
  addReviewComment(input: AddReviewCommentInput!): ReviewComment
  deleteReviewComment(input: DeleteReviewCommentInput!): ReviewComment
  editReviewComment(input: EditReviewCommentInput!): ReviewComment
}

# Input for addPost Mutation
input AddPostInput {
  title: String!
  content: String!
}

# Input for editPost Mutation
input EditPostInput {
  id: Int!
  title: String!
  content: String!
}

input AddReviewInput {
  content: String!
  # Needed for reviewUpdated Subscription filter
  postId: Int!
}

input DeleteReviewInput {
  id: Int!
  # Needed for reviewUpdated Subscription filter
  postId: Int!
}

input EditReviewInput {
  id: Int!
  content: String!
  # Needed for reviewUpdated Subscription filter
  postId: Int!
}

input AddReviewCommentInput {
  content: String!
  # Needed for reviewCommentUpdated Subscription filter
  postId: Int!
}

input DeleteReviewCommentInput {
  id: Int!
  # Needed for reviewCommentUpdated Subscription filter
  postId: Int!
}

input EditReviewCommentInput {
  id: Int!
  content: String!
  # Needed for reviewCommentUpdated Subscription filter
  postId: Int!
}

extend type Subscription {
  # Subscription for when editing a post
  postUpdated(id: Int!): UpdatePostPayload
  # Subscription for post list
  postsUpdated(endCursor: Int!): UpdatePostPayload
  reviewUpdated(postId: Int!): UpdateReviewPayload
  reviewCommentUpdated(reviewId: Int!): UpdateReviewCommentPayload
}

# Payload for postsUpdated Subscription
type UpdatePostPayload {
  mutation: String!
  id: Int!
  node: Post
}

# Payload for reviewUpdated Subscription
type UpdateReviewPayload {
  mutation: String!
  id: Int
  postId: Int!
  node: Review
}

# Payload for reviewUpdated Subscription
type UpdateReviewCommentPayload {
  mutation: String!
  id: Int
  postId: Int!
  node: ReviewComment
}
